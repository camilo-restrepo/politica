import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.function.FlatMapFunction;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.api.java.function.PairFunction;
import org.apache.spark.streaming.Durations;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import org.bson.BSONObject;
import org.bson.BasicBSONObject;
import org.bson.Document;

import scala.Tuple2;

public class StreamWordCount {

	private static final Pattern UNDESIRABLES = Pattern.compile("[\\d+\\]\\[\\+(){},.;¡!¿?<>%]");
	private static final Pattern SPACE = Pattern.compile(" ");

	public static void main(String[] args) throws IOException, TimeoutException {

		SparkConf sparkConf = new SparkConf().setMaster("spark://0.0.0.0:7077").setAppName("Stream Word Count");
		JavaStreamingContext ssc = new JavaStreamingContext(sparkConf, Durations.seconds(1));

		// Create a JavaReceiverInputDStream on target ip:port and count the
		// words in input stream of \n delimited text (eg. generated by 'nc')
		// Note that no duplication in storage level only for running locally.
		// Replication necessary in distributed scenario for fault tolerance.
		JavaReceiverInputDStream<String> lines = ssc.receiverStream(new JavaCustomReceiver());

		JavaDStream<CandidateWord> words = lines.flatMap(new FlatMapFunction<String, CandidateWord>() {
			@Override
			public Iterable<CandidateWord> call(String x) {
				Document document = Document.parse(x);
				List<String> targets = (List<String>) document.get("targetTwitterIds");
				String text = (String) document.get("text");

				List<CandidateWord> words = new ArrayList<CandidateWord>();
				if (text != null) {
					text = text.replace(".", "").replace("\u2026", "").replace(",", "").replace(":", "")
							.replace("\r", "").replace("\n", "").replace("\"", "").replace("|", "").trim()
							.toLowerCase();
					text = UNDESIRABLES.matcher(text).replaceAll("");

					String[] tweetTokens = SPACE.split(text);
					StopwordsSpanish stopwords = new StopwordsSpanish();
					for (String token : tweetTokens) {
						if (!token.equals("rt") && !token.startsWith("@") && !token.startsWith("#")
								&& !token.startsWith("http") && !stopwords.isStopword(token)) {
							if (targets != null && targets.size() > 0 && !token.isEmpty()) {
								for (String target : targets) {
									words.add(new CandidateWord(token, (String) target));
								}
							}
						}
					}
				}

				return words;
			}
		});

		JavaPairDStream<CandidateWord, Integer> wordCounts = words
				.mapToPair(new PairFunction<CandidateWord, CandidateWord, Integer>() {
					@Override
					public Tuple2<CandidateWord, Integer> call(CandidateWord s) {
						return new Tuple2<CandidateWord, Integer>(s, 1);
					}
				});

		JavaPairDStream<CandidateWord, Integer> counts = wordCounts
				.reduceByKey(new Function2<Integer, Integer, Integer>() {
					@Override
					public Integer call(Integer i1, Integer i2) {
						return i1 + i2;
					}
				});

		JavaPairDStream<Object, BSONObject> save = counts
				.mapToPair(new PairFunction<Tuple2<CandidateWord, Integer>, Object, BSONObject>() {
					public Tuple2<Object, BSONObject> call(Tuple2<CandidateWord, Integer> tuple) {
						BSONObject bson = new BasicBSONObject();
						bson.put("word", tuple._1.getWord());
						bson.put("target", tuple._1.getCandidate());
						bson.put("count", tuple._2);
						// System.out.println(tuple._1.getCandidate() + " " +
						// tuple._1.getWord() + " " + tuple._2);
						return new Tuple2<Object, BSONObject>(null, bson);
					}
				});

		// Configuration outputConfig = new Configuration();
		// outputConfig.set("mongo.output.uri",
		// "mongodb://localhost:27017/boarddb.words");
		// save.saveAsNewAPIHadoopFiles(prefix, suffix, keyClass, valueClass,
		// outputFormatClass, conf);
		//
		// save.saveAsNewAPIHadoopFile(path, keyClass, valueClass,
		// outputFormatClass, conf);
		// save.saveAsNewAPIHadoopFiles("file:///empty", Object.class,
		// Object.class, MongoOutputFormat.class, outputConfig);
		save.print();
		ssc.start();
		ssc.awaitTermination();
	}

}